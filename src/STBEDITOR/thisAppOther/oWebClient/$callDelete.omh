;  call oRest.$master_delete
;  Breakpoint {pParams}
Do pParamsRow.$cols.$add('sid',kCharacter,kSimplechar,100)
Calculate pParamsRow.sid as tConstants.RESTsessionID

Do method $prepareToSend (pParamsRow) Returns lrParams

;  Calculate lcURI as con(tConstants.REST_URI,'master/',lrParams.C1)
Calculate lcURI as con(tConstants.REST_URI,'master?pRequest=',lrParams.C1)

Do ioRest.$init(lcURI,kOWEBhttpMethodDelete,ilHeaders,'')

Calculate ldStartTime as #D
Do ioRest.$run() Returns lbStatus
Calculate inServiceCallTime as ddiff(kCentiSecond,ldStartTime,#D)*10     ;; milliseconds

If lbStatus
	Do ioRest.$returnVal(irResponseHeaders,irResponse,irJSON) Returns icJSON
	
	If irResponse.httpStatusCode<>200
		;  do some error reporting here
		Calculate pErrorField.ErrorCode as irResponse.httpStatusCode
		Calculate pErrorField.NativeErrorCode as irResponse.httpStatusCode
		Calculate pErrorField.NativeErrorText as irResponseHeaders.omniserror
		
	Else
		Calculate lbinResponse as binfromhex(irJSON.data)     ;; convert the return to binary and put it into a row variable
		Do $cinst.$extractData(lbinResponse) Returns lrResult     ;; decrypt and return the original server data row
		Calculate inServerTime as lrResult.elapsed
		If lrResult.rowsaffected>=1
			;  successful update
		Else
			;  this may not be an error.
			;  If the delete statement is legal but the record does not exist there will be no values in lrResult.error.
			Do pErrorField.$assignrow(lrResult.error)
		End If
	End If
End If

Quit method lrResult.rowsaffected